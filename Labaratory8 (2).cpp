#include <iostream>
#define _CRT_SECURE_NO_WARNINGS
#include <math.h>
#include < stdio.h >
#include <stdlib.h>
#include <string>
#include <cstdlib>

using namespace std;
/*Варіант 2

1)	Створити клас Point, який описує точки в двовимірній площині(x, y).Через перевантаження конструктора реалізувати 
    можливість задання як окремо координати x(y за замовчуванням 0), так і навпаки(0, y) та значення по замовчуванню(0, 0).
2)	Створити абстрактний клас геометричних фігур з назвою _Shape.В ньому створити віртуальні функції
    _Perimeter(Периметр) та _Area(Площа), та чисту віртуальну функцію Init(яка буде в класах нащадках
    ініціалізувати фігуру по її заданим точкам з використанням класу Point).
3)	Створити 2 класи, які є класами нащадками класу _Shape, які відповідають наступним фігурам : рівносторонній 
    трикутник та квадрат(зробити відповідні перевірки, для даних які вводяться з клавіатури).В них безпосередньо 
    реалізувати код методів _Perimeter та _Area(створивши необхідну кількість приватних об’єктів класу Point 
    та задавши необхідні математичні операції для розрахунків периметрів та площ).
4)	Створити зовнішню дружню функцію(одночасно до двох класів), яка по двом заданим фігурам різних класів визначить і вкаже, площа якої фігури більша.
5)	Створити клас Name в якому створити строкове поле name та реалізувати публічні методи для зміни, встановлення та виводу значення name.
6)	Використовуючи множинне успадкування створити клас Name_Shape який є нащадком класу рівностороннього трикутника та класу Name.
    В ньому перевантажити функцію Init таким чином, щоб вона встановлювала назву фігури та визначала площу 
    рівностороннього трикутника та виводила результат у вигляді(приклад «The square of name is 10.5»).
7)	В головній функції main спробувати створити об'єкт абстрактного класу (пересвідчитись що це не спрацює). 
    Створити об'єкти класів рівностороннього трикутника та квадрату(дані про точки можна ввести з клавіатури, 
    або безпосередньо в коді задати).Продемонструвати роботу методів для знаходження периметрів та площ цих фігур.
    Показати роботу дружньої функції для цих фігур.Створити об'єкт класу Name_Shape та показати роботу 
    перевантаженої функції Init (назву запропонувати ввести з клавіатури).
*/



//1)	Створити клас Point, який описує точки в двовимірній площині(x, y).Через перевантаження конструктора реалізувати можливість задання як окремо координати x(y за замовчуванням 0), так і навпаки(0, y) та значення по замовчуванню(0, 0).
class Point {
public:
	int x;
	int y;
	Point() : x(0), y(0){}
	Point(int _x) : x(_x), y(0) {}
	Point(int _x, int _y): x(_x), y(_y){}
};

//2)	Створити абстрактний клас геометричних фігур з назвою _Shape.В ньому створити віртуальні функції
//  _Perimeter(Периметр) та _Area(Площа), та чисту віртуальну функцію Init(яка буде в класах нащадках 
// ініціалізувати фігуру по її заданим точкам з використанням класу Point).

 class _Shape {
 public:
     virtual double _Perimeter() const = 0;
     virtual double _Area() const = 0;
     virtual void Init(const Point& _p1, const Point& _p2) = 0;
};



 //3)	Створити 2 класи, які є класами нащадками класу _Shape, які відповідають наступним фігурам : рівносторонній 
 //     трикутник та квадрат(зробити відповідні перевірки, для даних які вводяться з клавіатури).В них безпосередньо
 //     реалізувати код методів _Perimeter та _Area(створивши необхідну кількість приватних об’єктів класу Point
 //     та задавши необхідні математичні операції для розрахунків периметрів та площ).

 class Triangle : public _Shape {
 private:
     Point p1, p2; //Використовую тільки 2 поінта, бо для визначення площі та периметра рівностороннього трикутника достатньо лише 1 сторони.

 public:
     void Init(const Point& _p1, const Point& _p2) override {
         p1 = _p1;
         p2 = _p2;
     }

     double _Perimeter() const override {
         double side = sqrt((pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2)));
         return 3 * side;
     }

     double _Area() const override {
         double side = sqrt((pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2)));
         return (sqrt(3) / 4) * pow(side, 2);
     }
 };


 class Square : public _Shape {
 private:
     Point p1, p2; // та ж сама історія і з квадратом, достатньо лише 1 сторони

 public:
     void Init(const Point& _p1, const Point& _p2) {
         p1 = _p1;
         p2 = _p2;
     }

     double _Perimeter() const override {
         double side = sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
         return 4*side;
     }

     double _Area() const override {
         double side = sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
         return side * side;
     }
 };


 //4) Створити зовнішню дружню функцію(одночасно до двох класів), яка по двом заданим фігурам різних класів визначить і вкаже, площа якої фігури більша.

 string compare_Areas(const Triangle& triangle, const Square& square) {
     if (triangle._Area() > square._Area()) {
         return "Area of the triangle is greater";
     }
     else if (triangle._Area() == square._Area()) {
         return "Areas of the triangle and square are equal";
     }
     else {
         return "Area of the square is greater";
     }
 }
 //5)	Створити клас Name в якому створити строкове поле name та реалізувати публічні методи для зміни, встановлення та виводу значення name.

 class Name {
 public:
     string name;
     void setName() {
         cout << "Enter the name: ";
         cin >> name;
     }
     string getName() {
         return name;
     }
 };


 //6)	Використовуючи множинне успадкування створити клас Name_Shape який є нащадком класу рівностороннього трикутника та класу Name.
 //     В ньому перевантажити функцію Init таким чином, щоб вона встановлювала назву фігури та визначала площу
 //     рівностороннього трикутника та виводила результат у вигляді(приклад «The square of name is 10.5»).
 class Name_Shape : public Triangle, public Name{
 private:
     Point p1, p2;
 public:
     void Init(const Point& _p1, const Point& _p2) {
         Triangle::Init(_p1, _p2);
         setName();
         cout << "The area of the " << getName() << " is: " << Triangle::_Area() << endl;
     }
     
 };




 //7)	В головній функції main спробувати створити об'єкт абстрактного класу (пересвідчитись що це не спрацює). 
 //     Створити об'єкти класів рівностороннього трикутника та квадрату(дані про точки можна ввести з клавіатури, 
 //     або безпосередньо в коді задати).Продемонструвати роботу методів для знаходження периметрів та площ цих фігур.
 //     Показати роботу дружньої функції для цих фігур.Створити об'єкт класу Name_Shape та показати роботу 
 //     перевантаженої функції Init(назву запропонувати ввести з клавіатури).
 int main() {
     // Неможливо створити об'єкт абстрактного класу _Shape
     //_Shape shape;

     // Створення об'єктів класів
     Triangle triangle;
     Square square;

     // Введення 2 точок, адже більше нам не знадобиться(в нас квадрат та рівносторонній трикутник)
     Point p1(5, 24), p2(7, 13);

     // Ініціалізація фігур
     triangle.Init(p1, p2);
     square.Init(p1, p2);

     // Демонстрація роботи методів
     cout << "Perimeter of the triangle: " << triangle._Perimeter() << endl;
     cout << "Area of the triangle: " << triangle._Area() << endl;
     cout << "\n-------------------------------------------------------------------------------\n\n";
     cout << "Perimeter of the square: " << square._Perimeter() << endl;
     cout << "Area of the square: " << square._Area() << endl;
     cout << "\n-------------------------------------------------------------------------------\n\n";
     // Дружня функція для порівняння площ
     cout << compare_Areas(triangle, square) << endl;
     cout << "\n-------------------------------------------------------------------------------\n\n";
     // Використання класу Name_Shape
     Name_Shape namedTriangle;
     namedTriangle.Init(p1, p2);
     return 0;
 }